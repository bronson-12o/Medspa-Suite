name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.node-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Cache node modules
        id: node-cache
        uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install API dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: cd api && npm ci

      - name: Install Frontend dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: cd frontend && npm ci

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install API dependencies
        run: cd api && npm ci

      - name: Install Frontend dependencies
        run: cd frontend && npm ci

      - name: Lint API
        run: cd api && npm run lint

      - name: Lint Frontend
        run: cd frontend && npm run lint

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install API dependencies
        run: cd api && npm ci

      - name: Install Frontend dependencies
        run: cd frontend && npm ci

      - name: Generate Prisma client
        run: cd api && npx prisma generate

      - name: Typecheck API
        run: cd api && npx tsc --noEmit

      - name: Typecheck Frontend
        run: cd frontend && npx tsc --noEmit

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('api/package-lock.json', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install API dependencies
        run: cd api && npm ci

      - name: Install Frontend dependencies
        run: cd frontend && npm ci

      - name: Generate Prisma client
        run: cd api && npx prisma generate

      - name: Run API tests
        run: cd api && npm run test:api

      # Add frontend tests when available
      # - name: Run Frontend tests
      #   run: cd frontend && npm test

  integration:
    needs: [lint, typecheck, test]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: dev
          POSTGRES_DB: medspa_local
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Install API dependencies
        run: cd api && npm ci

      - name: Setup test environment
        run: |
          cd api
          cp .env.example .env
          echo "DATABASE_URL=postgresql://dev:dev@localhost:5432/medspa_local?schema=public" >> .env
          echo "SHADOW_DATABASE_URL=postgresql://dev:dev@localhost:5432/medspa_local_shadow?schema=public" >> .env

      - name: Generate Prisma client
        run: cd api && npx prisma generate

      - name: Run database migrations
        run: cd api && npx prisma migrate dev --name ci_test

      - name: Seed database
        run: cd api && npm run db:seed

      - name: Start API server in background
        run: cd api && npm run dev &
        env:
          CI: true

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health 2>/dev/null; do sleep 2; done' || echo "API health check failed, continuing with smoke tests"

      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running integration smoke tests..."
          
          # Test revenue report endpoint
          echo "Testing revenue report..."
          REVENUE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3001/reports/revenue?from=2025-08-30&to=2025-09-06" || echo "000")
          echo "Revenue endpoint status: $REVENUE_RESPONSE"
          
          # Test dashboard KPI events
          echo "Testing KPI events..."
          KPI_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3001/dashboard/kpi/events" || echo "000")
          echo "KPI events endpoint status: $KPI_RESPONSE"
          
          # Test leads endpoint
          echo "Testing leads..."
          LEADS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3001/leads" || echo "000")
          echo "Leads endpoint status: $LEADS_RESPONSE"
          
          echo "âœ… Smoke tests completed"

# ===================================================================
# PRODUCTION DEPLOYMENT WORKFLOW (COMMENTED OUT FOR SAFETY)
# ===================================================================
# 
# Uncomment and customize the following workflow for production deployments.
# NEVER commit real secrets to this repository.
# 
# production-migration:
#   name: Production Migration
#   runs-on: ubuntu-latest
#   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#   environment: production  # GitHub Environment with approval required
#   needs: [integration]
#   
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       
#     - name: Setup Node.js 20
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'
#         
#     - name: Install dependencies
#       run: cd api && npm ci
#       
#     - name: Run production migrations
#       run: cd api && npx prisma migrate deploy
#       env:
#         DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
#         
#     - name: Notify deployment
#       run: echo "ðŸš€ Production migration completed successfully"
#
# deploy:
#   name: Deploy to Production
#   runs-on: ubuntu-latest
#   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#   environment: production
#   needs: [production-migration]
#   
#   steps:
#     - name: Deploy application
#       run: echo "ðŸš€ Deploy your application here (Docker, Vercel, AWS, etc.)"
#       # Add your deployment steps here
#       # Examples:
#       # - Docker build and push
#       # - Deploy to Vercel/Netlify
#       # - Deploy to AWS/Azure/GCP
#       # - Update Kubernetes manifests
#       
# ===================================================================